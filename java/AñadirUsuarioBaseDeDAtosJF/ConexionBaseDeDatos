
package conexion;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.UIManager;

public class ConexionBaseDeDatos {
    // Debes tener la base de datos creada con anterioridad.
    // Creamos una tabla usuarios con nombre usuario y contraseÃ±a.
   
    private static final String HOST = "localhost";         // IP o dominio del servidor MySQL
    private static final String PUERTO = "3306";            // Puerto (por defecto 3306)
    private static final String BASE_DATOS = "tiendaonline"; // Nombre de tu base de datos
    private static final String USUARIO = "root";           // Tu usuario de MySQL
    private static final String CONTRASEÃ‘A = "1234";            // Tu contraseÃ±a de MySQL

    // ðŸ”— ConstrucciÃ³n dinÃ¡mica de la URL de conexiÃ³n
    private static final String URL = String.format(
        "jdbc:mysql://%s:%s/%s?useSSL=false&serverTimezone=UTC",
        HOST, PUERTO, BASE_DATOS
    );
   
// este mÃ©todo permite insertar un usuario y una contraseÃ±a en la base de datos creada   
   public static String comandoInsert = "INSERT INTO usuarios (usuario, contrasena) VALUES (?, ?)";
    // Establecemos la conexion con la base de datos, pasando la URL, usuario y contraseÃ±a.
    public static boolean conectarYguardarConsulta(String usuario, String constrasena) throws SQLException
    {
        try(Connection conexion = DriverManager.getConnection(URL,USUARIO,CONTRASEÃ‘A);
        PreparedStatement consultaAenviar = conexion.prepareStatement(comandoInsert)){
        // pasamos los datos a la consulta con la instancia de la consulta preparada con el set
        consultaAenviar.setString(1, usuario);
        consultaAenviar.setString(2, constrasena);    
        
        // Ejecutamos la consulta y almacenamos el resultado:
        
        int filas = consultaAenviar.executeUpdate();
        // Si filas es mayor a cero, significa que el usuario ha sido insertado.
            if (filas > 0) 
            {
                System.out.println("Has insertado el usuario............"); 
                return true;
            }
        
        }catch(SQLException e){
        e.printStackTrace(); 
        System.out.println("Error en la conexiÃ³n o en la insercciÃ³n");
        }     
    return false;
    }
    // 1Âº Este mÃ©todo recibe un id. Lo usarÃ¡ para verificar en la consulta si el usuario existe.
    // 2Âº Creamos la consulta para comprobar si el usuario existe dentro de la bd.
    // 3Âº Envolvemos con try y catch.
    // 4Âº Establecemos la conexion y preparamos la consulta, la usaremos para enviarla.
    // 5Âº Si el resultado afecta a filas devuelve true. 
    // 6Âº En caso contrario lanzarÃ¡ el error.
    public static boolean siUsuarioExiste(int id) throws SQLException
    {
    String sql = "SELECT * FROM usuarios WHERE id = ?";
    
    try(Connection conexion = DriverManager.getConnection(URL,USUARIO,CONTRASEÃ‘A);
        PreparedStatement prepararConsultaParaEnviar = conexion.prepareStatement(sql))
            {
            prepararConsultaParaEnviar.setInt(1, id);
            
                
            try(ResultSet resultado = prepararConsultaParaEnviar.executeQuery()){
                
              return resultado.next(); // True si encuentra el usuario
  
                
            }catch(SQLException e)
            {
                e.printStackTrace();
            }
                
            }
         return false;
    }



}
